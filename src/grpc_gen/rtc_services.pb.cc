// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_services.proto

#include "rtc_services.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediaservice {
constexpr RecvAddrRequest::RecvAddrRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_count_(0u){}
struct RecvAddrRequestDefaultTypeInternal {
  constexpr RecvAddrRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecvAddrRequestDefaultTypeInternal() {}
  union {
    RecvAddrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecvAddrRequestDefaultTypeInternal _RecvAddrRequest_default_instance_;
constexpr IPv4Addr::IPv4Addr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u){}
struct IPv4AddrDefaultTypeInternal {
  constexpr IPv4AddrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPv4AddrDefaultTypeInternal() {}
  union {
    IPv4Addr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPv4AddrDefaultTypeInternal _IPv4Addr_default_instance_;
constexpr RecvAddrResponse::RecvAddrResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(){}
struct RecvAddrResponseDefaultTypeInternal {
  constexpr RecvAddrResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecvAddrResponseDefaultTypeInternal() {}
  union {
    RecvAddrResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecvAddrResponseDefaultTypeInternal _RecvAddrResponse_default_instance_;
}  // namespace mediaservice
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rtc_5fservices_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rtc_5fservices_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rtc_5fservices_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rtc_5fservices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaservice::RecvAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaservice::RecvAddrRequest, addr_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaservice::IPv4Addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaservice::IPv4Addr, ip_),
  PROTOBUF_FIELD_OFFSET(::mediaservice::IPv4Addr, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaservice::RecvAddrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaservice::RecvAddrResponse, address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mediaservice::RecvAddrRequest)},
  { 7, -1, -1, sizeof(::mediaservice::IPv4Addr)},
  { 15, -1, -1, sizeof(::mediaservice::RecvAddrResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaservice::_RecvAddrRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaservice::_IPv4Addr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaservice::_RecvAddrResponse_default_instance_),
};

const char descriptor_table_protodef_rtc_5fservices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022rtc_services.proto\022\014mediaservice\"%\n\017Re"
  "cvAddrRequest\022\022\n\naddr_count\030\001 \001(\r\"$\n\010IPv"
  "4Addr\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\";\n\020RecvA"
  "ddrResponse\022\'\n\007address\030\001 \003(\0132\026.mediaserv"
  "ice.IPv4Addr2_\n\010MediaRTC\022S\n\020get_recv_add"
  "ress\022\035.mediaservice.RecvAddrRequest\032\036.me"
  "diaservice.RecvAddrResponse\"\000B<\n\037com.jsx"
  "niu.cloud.rtc.signal.rpcB\021MediaServicePr"
  "otoP\001\242\002\003SIGb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rtc_5fservices_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rtc_5fservices_2eproto = {
  false, false, 339, descriptor_table_protodef_rtc_5fservices_2eproto, "rtc_services.proto", 
  &descriptor_table_rtc_5fservices_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_rtc_5fservices_2eproto::offsets,
  file_level_metadata_rtc_5fservices_2eproto, file_level_enum_descriptors_rtc_5fservices_2eproto, file_level_service_descriptors_rtc_5fservices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rtc_5fservices_2eproto_getter() {
  return &descriptor_table_rtc_5fservices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rtc_5fservices_2eproto(&descriptor_table_rtc_5fservices_2eproto);
namespace mediaservice {

// ===================================================================

class RecvAddrRequest::_Internal {
 public:
};

RecvAddrRequest::RecvAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaservice.RecvAddrRequest)
}
RecvAddrRequest::RecvAddrRequest(const RecvAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_count_ = from.addr_count_;
  // @@protoc_insertion_point(copy_constructor:mediaservice.RecvAddrRequest)
}

void RecvAddrRequest::SharedCtor() {
addr_count_ = 0u;
}

RecvAddrRequest::~RecvAddrRequest() {
  // @@protoc_insertion_point(destructor:mediaservice.RecvAddrRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecvAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvAddrRequest::ArenaDtor(void* object) {
  RecvAddrRequest* _this = reinterpret_cast< RecvAddrRequest* >(object);
  (void)_this;
}
void RecvAddrRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvAddrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecvAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaservice.RecvAddrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvAddrRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 addr_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvAddrRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaservice.RecvAddrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 addr_count = 1;
  if (this->_internal_addr_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_addr_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaservice.RecvAddrRequest)
  return target;
}

size_t RecvAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaservice.RecvAddrRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 addr_count = 1;
  if (this->_internal_addr_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_addr_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvAddrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecvAddrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvAddrRequest::GetClassData() const { return &_class_data_; }

void RecvAddrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecvAddrRequest *>(to)->MergeFrom(
      static_cast<const RecvAddrRequest &>(from));
}


void RecvAddrRequest::MergeFrom(const RecvAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaservice.RecvAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addr_count() != 0) {
    _internal_set_addr_count(from._internal_addr_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvAddrRequest::CopyFrom(const RecvAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaservice.RecvAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvAddrRequest::IsInitialized() const {
  return true;
}

void RecvAddrRequest::InternalSwap(RecvAddrRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(addr_count_, other->addr_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvAddrRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rtc_5fservices_2eproto_getter, &descriptor_table_rtc_5fservices_2eproto_once,
      file_level_metadata_rtc_5fservices_2eproto[0]);
}

// ===================================================================

class IPv4Addr::_Internal {
 public:
};

IPv4Addr::IPv4Addr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaservice.IPv4Addr)
}
IPv4Addr::IPv4Addr(const IPv4Addr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:mediaservice.IPv4Addr)
}

void IPv4Addr::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0u;
}

IPv4Addr::~IPv4Addr() {
  // @@protoc_insertion_point(destructor:mediaservice.IPv4Addr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPv4Addr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv4Addr::ArenaDtor(void* object) {
  IPv4Addr* _this = reinterpret_cast< IPv4Addr* >(object);
  (void)_this;
}
void IPv4Addr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv4Addr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPv4Addr::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaservice.IPv4Addr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv4Addr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediaservice.IPv4Addr.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv4Addr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaservice.IPv4Addr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediaservice.IPv4Addr.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaservice.IPv4Addr)
  return target;
}

size_t IPv4Addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaservice.IPv4Addr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPv4Addr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPv4Addr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPv4Addr::GetClassData() const { return &_class_data_; }

void IPv4Addr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPv4Addr *>(to)->MergeFrom(
      static_cast<const IPv4Addr &>(from));
}


void IPv4Addr::MergeFrom(const IPv4Addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaservice.IPv4Addr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPv4Addr::CopyFrom(const IPv4Addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaservice.IPv4Addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4Addr::IsInitialized() const {
  return true;
}

void IPv4Addr::InternalSwap(IPv4Addr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv4Addr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rtc_5fservices_2eproto_getter, &descriptor_table_rtc_5fservices_2eproto_once,
      file_level_metadata_rtc_5fservices_2eproto[1]);
}

// ===================================================================

class RecvAddrResponse::_Internal {
 public:
};

RecvAddrResponse::RecvAddrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaservice.RecvAddrResponse)
}
RecvAddrResponse::RecvAddrResponse(const RecvAddrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_(from.address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediaservice.RecvAddrResponse)
}

void RecvAddrResponse::SharedCtor() {
}

RecvAddrResponse::~RecvAddrResponse() {
  // @@protoc_insertion_point(destructor:mediaservice.RecvAddrResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecvAddrResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvAddrResponse::ArenaDtor(void* object) {
  RecvAddrResponse* _this = reinterpret_cast< RecvAddrResponse* >(object);
  (void)_this;
}
void RecvAddrResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvAddrResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecvAddrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaservice.RecvAddrResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvAddrResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediaservice.IPv4Addr address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvAddrResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaservice.RecvAddrResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediaservice.IPv4Addr address = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaservice.RecvAddrResponse)
  return target;
}

size_t RecvAddrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaservice.RecvAddrResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediaservice.IPv4Addr address = 1;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvAddrResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecvAddrResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvAddrResponse::GetClassData() const { return &_class_data_; }

void RecvAddrResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecvAddrResponse *>(to)->MergeFrom(
      static_cast<const RecvAddrResponse &>(from));
}


void RecvAddrResponse::MergeFrom(const RecvAddrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaservice.RecvAddrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvAddrResponse::CopyFrom(const RecvAddrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaservice.RecvAddrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvAddrResponse::IsInitialized() const {
  return true;
}

void RecvAddrResponse::InternalSwap(RecvAddrResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvAddrResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rtc_5fservices_2eproto_getter, &descriptor_table_rtc_5fservices_2eproto_once,
      file_level_metadata_rtc_5fservices_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediaservice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediaservice::RecvAddrRequest* Arena::CreateMaybeMessage< ::mediaservice::RecvAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaservice::RecvAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaservice::IPv4Addr* Arena::CreateMaybeMessage< ::mediaservice::IPv4Addr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaservice::IPv4Addr >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaservice::RecvAddrResponse* Arena::CreateMaybeMessage< ::mediaservice::RecvAddrResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaservice::RecvAddrResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
